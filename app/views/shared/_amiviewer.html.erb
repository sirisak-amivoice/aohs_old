<%
enavol = $CF.get("client.aohs_web.audioViewer.showVol").to_i
enaspd = $CF.get("client.aohs_web.audioViewer.showSpeed").to_i
%>
<% content_for :header do %>

<%= javascript_src_path '/jquery/jquery-ui-1.8.7.custom/development-bundle/ui/jquery.ui.slider.js' %>
<%= javascript_src_path '/jquery/jquery.selectToUISlider/js/selectToUISlider.jQuery.js' %>
<%= stylesheet_src_path '/jquery/jquery.selectToUISlider/css/ui.slider.extras.css' %>

<style type="text/css">
		#AmiAdvw {
				border:1px solid #cccccc;
		}
		.span-slider {
				display:inline-block;
				width:65px;
				height:5px;
		}
		.div-slider {
				width:65px;
				height:5px;
				margin-top:2px;
		}
		.ui-slider {
				height:6px;
				background: #e9f4ff;
				border:1px;
				margin-top:3px;
		}
		.ui-slider .ui-slider-handle {
				height:9px;
				border:2px solid;
				background-color: #99CCFF;
				border-color: #99CCFF; 
    }
		.ui-slider span.ui-slider-tic {
				height:2px;
				display:none;
		}
		.ui-slider-horizontal {
				height: 6px; 
				border: 0;
				background-color: #66C2FF;
		}
		#lb-filemode {
			margin-bottom: 5px;
		}
</style> 
<script type="text/javascript">
		var iconMedia = {
				enaplay: "<%=image_src_path('media_control/play.png') %>",
				display: "<%=image_src_path('media_control/play.gif') %>",
				enastop: "<%=image_src_path('media_control/stop.png') %>",
				disstop: "<%=image_src_path('media_control/stop.gif') %>",
				enapaus: "<%=image_src_path('media_control/pause.png') %>",
				dispaus: "<%=image_src_path('media_control/pause.gif') %>",
				enanext: "<%=image_src_path('media_control/next.png') %>",
				disnext: "<%=image_src_path('media_control/next.gif') %>",
				enaprev: "<%=image_src_path('media_control/previous.png') %>",
				disprev: "<%=image_src_path('media_control/back.gif') %>"
		}
		var ctrlAmiV = {
				currentRow: 0,
				totalRow: 0,
				audioSet: false,
				speed: 0,
				volume: 0
		}
      
	  var AudioPlayer = {
				isActiveX: "<%= ($CF.get('client.aohs_web.audioViewer.runMode') == 'activex') %>",
				isPausePlaying: false,
				isPlaying: false,
				buttons: {
				init: function(){
						$("#icon-onplay").attr("src",iconMedia.display);
						$("#icon-onpause").attr("src",iconMedia.dispaus);
						$("#icon-onstop").attr("src",iconMedia.disstop);
						$("#icon-onprev").attr("src",iconMedia.disprev);
						$("#icon-onnext").attr("src",iconMedia.disnext);				
				}, 
				started: function(){
						$("#icon-onplay").attr("src",iconMedia.display);
						$("#icon-onpause").attr("src",iconMedia.enapaus);
						$("#icon-onstop").attr("src",iconMedia.enastop); 				
				},
				stopped: function(){
						$("#icon-onpause").attr("src",iconMedia.dispaus);
						$("#icon-onstop").attr("src",iconMedia.disstop);
						$("#icon-onplay").attr("src",iconMedia.enaplay);				
				},
				paused: function(){
						$("#icon-onplay").attr("src",iconMedia.enaplay);
						$("#icon-onstop").attr("src",iconMedia.enastop);
						$("#icon-onpause").attr("src",iconMedia.dispaus);				
				},
				resumed: function(){
						$("#icon-onplay").attr("src",iconMedia.display);
						$("#icon-onpause").attr("src",iconMedia.enapaus);
						$("#icon-onstop").attr("src",iconMedia.enastop);				
				},
				playNext: function(){
						if((ctrlAmiV.currentRow + 1) > ctrlAmiV.totalRow){
							 $("#icon-onnext").attr("src",iconMedia.disnext);
						} else {
							 $("#icon-onnext").attr("src",iconMedia.enanext);
						}				
				},
				playPrev: function(){
						if((ctrlAmiV.currentRow - 1) <= 0){
								$("#icon-onprev").attr("src",iconMedia.disprev);
						} else {
								$("#icon-onprev").attr("src",iconMedia.enaprev);
						}				
				},
				clear: function(){
						$("#icon-onplay").attr("src",iconMedia.display);
						$("#icon-onpause").attr("src",iconMedia.dispaus);
						$("#icon-onstop").attr("src",iconMedia.disstop);				
				}
				}	  	
	  } 
	  
		function onVoiceReset(rows_count){
		try {
				if(AudioPlayer.isActiveX){
						AmiAdvw.Reset();
				} else {
						AmiAdvw.reset();
				}
				AmiAdvw.setProperty("SelectedRangeOnLoaded",1);
		} catch(e){}        
				AudioPlayer.buttons.init();
				ctrlAmiV.totalRow = rows_count;
				ctrlAmiV.currentRow = 0;
				ctrlAmiV.audioSet = false;
				setVolumeAndSpeed();
		}
    
		var selectedPlayingMode = 2;
		
		function forceToMono() {
			try{
				if (selectedPlayingMode == 1) {
					AmiAdvw.ReChannel(1);
					//AmiAdvw.SamplesPerSec = 16000;  
					//AmiAdvw.Channels = 1;
				} else {
					AmiAdvw.ReChannel(2);
					//AmiAdvw.SamplesPerSec = 8000;   
					//AmiAdvw.Channels = 2;
				}
			}catch(e){}
    }
		
		function swapMonoStereo() {
			if (selectedPlayingMode == 1) {
        selectedPlayingMode = 2;
				$("#lb-filemode").html("Stereo");
      } else {
				selectedPlayingMode = 1;
				$("#lb-filemode").html("Mono");
			}
    }

    var Base64 = {

	    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",


	    encode: function(input) {
	        var output = "";
	        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
	        var i = 0;

	        input = Base64._utf8_encode(input);
	        console.log(input)

	        while (i < input.length) {

	            chr1 = input.charCodeAt(i++);
	            chr2 = input.charCodeAt(i++);
	            chr3 = input.charCodeAt(i++);

	            enc1 = chr1 >> 2;
	            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
	            enc4 = chr3 & 63;

	            if (isNaN(chr2)) {
	                enc3 = enc4 = 64;
	            } else if (isNaN(chr3)) {
	                enc4 = 64;
	            }

	            output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

	        }

	        return output;
	    },


	    decode: function(input) {
	        var output = "";
	        var chr1, chr2, chr3;
	        var enc1, enc2, enc3, enc4;
	        var i = 0;

	        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

	        while (i < input.length) {

	            enc1 = this._keyStr.indexOf(input.charAt(i++));
	            enc2 = this._keyStr.indexOf(input.charAt(i++));
	            enc3 = this._keyStr.indexOf(input.charAt(i++));
	            enc4 = this._keyStr.indexOf(input.charAt(i++));

	            chr1 = (enc1 << 2) | (enc2 >> 4);
	            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
	            chr3 = ((enc3 & 3) << 6) | enc4;

	            output = output + String.fromCharCode(chr1);

	            if (enc3 != 64) {
	                output = output + String.fromCharCode(chr2);
	            }
	            if (enc4 != 64) {
	                output = output + String.fromCharCode(chr3);
	            }

	        }

	        output = Base64._utf8_decode(output);

	        return output;

	    },

	    _utf8_encode: function(string) {
	        string = string.replace(/\r\n/g, "\n");
	        var utftext = "";

	        for (var n = 0; n < string.length; n++) {

	            var c = string.charCodeAt(n);

	            if (c < 128) {
	                utftext += String.fromCharCode(c);
	            }
	            else if ((c > 127) && (c < 2048)) {
	                utftext += String.fromCharCode((c >> 6) | 192);
	                utftext += String.fromCharCode((c & 63) | 128);
	            }
	            else {
	                utftext += String.fromCharCode((c >> 12) | 224);
	                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
	                utftext += String.fromCharCode((c & 63) | 128);
	            }

	        }

	        return utftext;
	    },

	    _utf8_decode: function(utftext) {
	        var string = "";
	        var i = 0;
	        var c = c1 = c2 = 0;

	        while (i < utftext.length) {

	            c = utftext.charCodeAt(i);

	            if (c < 128) {
	                string += String.fromCharCode(c);
	                i++;
	            }
	            else if ((c > 191) && (c < 224)) {
	                c2 = utftext.charCodeAt(i + 1);
	                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
	                i += 2;
	            }
	            else {
	                c2 = utftext.charCodeAt(i + 1);
	                c3 = utftext.charCodeAt(i + 2);
	                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
	                i += 3;
	            }

	        }

	        return string;
	    }

		}

		function decrypt(strIn){
			todel = []
			n=0
			while (true){
			    nn=n*(n+1)/2
			    if ( nn < strIn.length){
			        todel.push(nn)
					n++
			    }else{
			        break
			    }
			}

			arr=strIn.split("")

			todel.reverse()
			.forEach(function(x){
			  arr.splice(x,1)
			})

			return arr.join("")
		}

		
		function onVoiceLoad(row_no){	
			onVoiceStop();	
			ctrlAmiV.audioSet = false;
			ctrlAmiV.currentRow = parseInt(row_no);
			$("#mytable tr").each(function(index){
				var o = $(this);
				if(parseInt(o.attr("row_no")) == ctrlAmiV.currentRow){
					var audioUrl = o.attr("audiourl");
					alert(audioUrl)
					audioUrl = decrypt(audioUrl)
					alert(audioUrl)
					audioUrl = Base64.decode(audioUrl)

					alert(audioUrl)
					o.addClass("rowSelectedPlay");
					try {
						if(AudioPlayer.isActiveX){
							AmiAdvw.Reset();
							AmiAdvw.LoadFromFile(audioUrl);
							forceToMono();
							setPlayOffset(parseInt(o.attr("play_offset_sec")));						
						} else {
							AmiAdvw.reset();
							AmiAdvw.loadFromFile(audioUrl);						
						}
						ctrlAmiV.audioSet = true;
					} catch(e){ alert(e.message) };
				} else {
					o.removeClass("rowSelectedPlay");
				}
			});
			if(ctrlAmiV.audioSet){ onVoicePlay(); }
		}

		function setPlayOffset(st_sec,ed_sec){
			var st_sec = parseInt(st_sec) || 0;
			if(st_sec > 0){
				try {
					//AmiAdvw.SetViewingRange(st_sec*AmiAdvw.SamplesPerSec,ed_sec*AmiAdvw.SamplesPerSec);
					AmiAdvw.SetSelectedRange(0,st_sec * AmiAdvw.SamplesPerSec);
					doCutSelectedRange();
				}catch(e){
					alert(e.message);
				}
			}
		}
		
		function doCutSelectedRange(){
			if (AmiAdvw.LoadedSamples > AmiAdvw.Samples) {
				setTimeout("AmiAdvw.Cut()",500);
			} else {
				setTimeout("doCutSelectedRange()",1000);
			}
		}
		
		function onVoicePlay(){
				try {			   
						if(ctrlAmiV.audioSet == true){
								if(AudioPlayer.isActiveX){
										if(AudioPlayer.isPausePlaying){
												AmiAdvw.SelectedChannel = -1;
												AmiAdvw.ResumePlaying();
										} else {
												AmiAdvw.SelectedChannel = -1;
												AmiAdvw.Play();
										}			  	
								} else {
										if(AudioPlayer.isPausePlaying){
												AmiAdvw.setChannels(-1);
												AmiAdvw.resumePlaying();
										} else {
												AmiAdvw.setChannels(-1);
												AmiAdvw.play();
										}				  	  
								}
								setVolumeAndSpeed();
								AudioPlayer.isPausePlaying = false;
								AudioPlayer.isPlaying = true;
						} else {
								AudioPlayer.buttons.clear();
						}
						AudioPlayer.buttons.playNext();
						AudioPlayer.buttons.playPrev();
				} catch(e) { alert(e.message); ctrlAmiV.audioSet == false; }
		}

		function onVoiceStop(){
				if(ctrlAmiV.audioSet == true){
						if(AudioPlayer.isPlaying || AudioPlayer.isPausePlaying){
								if (AudioPlayer.isActiveX) {
										AmiAdvw.StopPlaying();			
								} else {
										AmiAdvw.stopPlaying();				
								}				
						}
				}
		}

		function onVoiceStop2(){
				if(ctrlAmiV.audioSet == true){
						AudioPlayer.buttons.stopped();
				}
		}

    function onVoicePause(){
        if(ctrlAmiV.audioSet == true){
						if (AudioPlayer.isActiveX) {
								AmiAdvw.PausePlaying();
						} else {
								AmiAdvw.pausePlaying();
						}
        }
    }

		function onVoicePlayNext(){
				if(ctrlAmiV.currentRow < ctrlAmiV.totalRow){
					 var nextRow = ctrlAmiV.currentRow + 1;
					 onVoiceLoad(nextRow);
				}
		}

		function onVoicePlayPrev(){
				if(ctrlAmiV.currentRow > 1){
						var prevRow = ctrlAmiV.currentRow - 1;
						onVoiceLoad(prevRow);
				}
		}

		function setVolumeAndSpeed(){
				try {
						var current_volume = $("select[name=AvwVolume] option:selected").val();
						var current_speed = $("select[name=AvwSpeed] option:selected").val();
						try {
								if (AudioPlayer.isActiveX) {
										if (AudioPlayer.isPlaying || AudioPlayer.isPausePlaying) {
												AmiAdvw.PausePlaying();
										} else {
												AmiAdvw.StopPlaying();
										}
										AmiAdvw.PlayingVolume = 1.0;
										AmiAdvw.PlayingVolume = parseFloat(current_volume);
										AmiAdvw.PlayingSpeed = 1.0;
										AmiAdvw.PlayingSpeed = parseFloat(current_speed);
										//AmiAdvw.SelectedChannel = -1;
										if (AudioPlayer.isPausePlaying) {
												AmiAdvw.ResumePlaying();
										} else {
												AmiAdvw.Play();
										}
								} else {
										if(AudioPlayer.isPlaying){
												//
										} else {
												//
										}
										AmiAdvw.setPlayingVolume(1.0);
										AmiAdvw.setPlayingVolume(parseFloat(current_volume));
										AmiAdvw.setPlayingSpeed(1.0);
										AmiAdvw.setPlayingSpeed(parseFloat(current_speed));
								}
						} catch(e){ alert("setVolumeAndSpeed() :" + e.message); }
        } catch(e){ alert("setVolumeAndSpeed() :" + e.message); };
    }

		function resetVolume(){	
				$("#AvwVolume").parent().find("DIV").remove();
				$("select[name=AvwVolume]").find("option").attr("selected",false);
				$("select[name=AvwVolume]").find("option[value=1.0]").attr("selected",true);
				$('#AvwVolume').selectToUISlider({ labels : false });
				try {
						if (AudioPlayer.isActiveX) {
								AmiAdvw.PlayingVolume = 1.0;
						} else {
								AmiAdvw.setPlayingVolume(1.0);	
						}
				} catch(e) {}
		}
	  
		function resetSpeed(){
				$("#AvwSpeed").parent().find("DIV").remove();
				$("select[name=AvwSpeed]").find("option").attr("selected",false);
				$("select[name=AvwSpeed]").find("option[value=1.0]").attr("selected",true);
				$("select[name=AvwSpeed]").focus();
				$('#AvwSpeed').selectToUISlider({ labels : false });      
				try {
						if (AudioPlayer.isActiveX) {
								AmiAdvw.PlayingSpeed = 1.0;
						} else {
								AmiAdvw.setPlayingSpeed(1.0);
						}
				} catch(e){}
		}
      
	  // for applet version
	  function adv_started(message){
	  	//do not thing	
		try { AmiAdvw = document.AmiAdvw; } catch(e) {}
				onVoiceReset(0);
	  }
	  function adv_stopping_foo(){
	  	//do not thing
	  }
	  function adv_attributeChanged(a, p1, p2){
	  	//do not thing
	  }
	  function adv_playerProcessing(){
				AudioPlayer.buttons.started();
	  }
	  function adv_playerStarted(){
				AudioPlayer.buttons.started();
				AudioPlayer.isPausePlaying = false;
				AudioPlayer.isPlaying = true;
	  }
	  function adv_playerStopped(){
				AudioPlayer.buttons.stopped();
				AudioPlayer.isPausePlaying = false;
				AudioPlayer.isPlaying = false;
	  }
	  function adv_playerPaused(){
				AudioPlayer.buttons.paused();
				AudioPlayer.isPausePlaying = true;
				AudioPlayer.isPlaying = false;
	  }
	  function adv_playerResumed(){
				AudioPlayer.buttons.resumed();
				AudioPlayer.isPausePlaying = false;
				AudioPlayer.isPlaying = false;
	  }
	  function adv_verticalViewChanged(){}
	  function adv_viewChanged(){} 
    $(document).ready(function(){
				if(AudioPlayer.isActiveX == 'true'){ 
						AudioPlayer.isActiveX = true;
						try { 
								AmiAdvw.setProperty("DisableContextMenu",1); 
						} catch(e) { } 
						onVoiceReset(0);
				} else {
						AudioPlayer.isActiveX = false;	
						// applet start => adv_started(message)	 
				}
				$('#AvwVolume').selectToUISlider({ labels : false });
        $('#AvwSpeed').selectToUISlider({ labels : false });
    });
 </script>
<% end %>

<div>
  <table cellspacing="0" width="100%" cellspacing="0">
    <tr>
      <td align="left" style="padding-left:2px;">
	    <% if $CF.get('client.aohs_web.audioViewer.runMode') == "applet" %>
        <applet width="100%" height="45" name="AmiAdvw" id="AmiAdvw" title="applet">
            <param name="jnlp_href" value="<%= "http://192.168.1.15:3001" %>/applets/audio_viewer/launch.jnlp?<%= rand(900000)%>"/>
			<param name="Prefix" value="adv_"/>
			<param name="WithControlButtons" value="false"/>
			<param name="ScrollBarVisible" value="true" />
			<param name="MeasureVisible" value="1" />
			<param name="DisableContextMenu" value="1">			
        </applet>
		<% else %>
        <object id="AmiAdvw" classid="clsid:E95BFCD4-723A-4580-B8A6-ACADCE6DE293" width="100%" height="45px" codebase="http://journey/tools/amiadvw/AmiAdvwCtrl.exe#version=1,0,0,0" onerror="this.outerHTML = '<center><font color=red>Audio Viewer ActiveX Control is not installed yet.</font></center>';" style="z-index:-2;" title="activex">
          <param name="MeasureVisible" value="1">
		  <param name="MeterVisible" value="0">
		  <param name="TimeSamplesGuideVisible" value="0">
          <param name="ColorTheme" value="1">
          <param name="ScrollBarVisible" value="1">
          <param name="ColorTheme" value="2">
        </object>
        <script type="text/javascript" for="AmiAdvw" event="PlayerStopped()">
              AudioPlayer.buttons.stopped();
			  AudioPlayer.isPausePlaying = false;
			  AudioPlayer.isPlaying = false;
        </script>
        <script type="text/javascript" for="AmiAdvw" event="PlayerStarted()">         
              AudioPlayer.buttons.started();
			  AudioPlayer.isPausePlaying = false;
			  AudioPlayer.isPlaying = true;
        </script>
        <script type="text/javascript" for="AmiAdvw" event="PlayerPaused()">
              AudioPlayer.buttons.paused();
			  AudioPlayer.isPausePlaying = true;
			  AudioPlayer.isPlaying = false;
        </script>
        <script type="text/javascript" for="AmiAdvw" event="PlayerResumed()">
              AudioPlayer.buttons.resumed();
			  AudioPlayer.isPausePlaying = false;
			  AudioPlayer.isPlaying = true;
        </script>
		<% end %>
      </td>
      <td align="center" width="220px">
        <div>
            <a href="#" onclick="onVoicePlay();" title="Play"><img border="0" src="<%=image_path("padding.png")%>" id="icon-onplay" alt="Play"></a>
            <a href="#" onclick="onVoicePause();" title="Pause"><img border="0" src="<%=image_path("padding.png")%>" id="icon-onpause" alt="Pause"></a>
            <a href="#" onclick="onVoiceStop();" title="Stop"><img border="0" src="<%=image_path("padding.png")%>" id="icon-onstop" alt="Stop"></a>
            <a href="#" onclick="onVoicePlayPrev();" title="Previous"><img border="0" src="<%=image_path("padding.png")%>" id="icon-onprev" alt="Previous"></a>
            <a href="#" onclick="onVoicePlayNext();" title="Next"><img border="0" src="<%=image_path("padding.png")%>" id="icon-onnext" alt="Next"></a>
						<a href="#" onclick="swapMonoStereo()" id="lb-filemode">Stereo</a>
        </div>
        <div>
            <table cellpadding="2" cellspacing="0">
              <tr>
                <td align="right" style="<%= 'display:none;' if enavol == 0 %>"><span style="font-size:9px;"><a href="#" title="Click here to reset play volume" onclick="resetVolume()">Vol</a></span></td>
                <td align="left" valign="absmidle" style="<%= 'display:none;' if enavol == 0 %>"><span id="volSlider" class="span-slider">
                  <select name="AvwVolume" id="AvwVolume" style="display:none">
                      <% $VOLUME_RANK.each do |x| %>
                        <% if x == 1.0 %>
                            <option value="<%=x %>" selected="selected"><%=x %></option>
                        <% else %>
                            <option value="<%=x %>"><%=x %></option>
                        <% end %>
                      <% end %>
                  </select></span></td>
                <td align="right" style="<%= 'display:none;' if enaspd == 0 %>"><span style="font-size:9px;"><a href="#" title="Click here to reset play speed" onclick="resetSpeed()">Speed</a></span></td>
                <td align="left" style="<%= 'display:none;' if enaspd == 0 %>" valign="absmidle"><span id="spdSlider" class="span-slider">
                  <select name="AvwSpeed" id="AvwSpeed" style="display:none">
                      <% $SPEED_RANK.each do |x| %>
                        <% if x == 1.0 %>
                            <option value="<%=x %>" selected="selected"><%=x %></option>
                        <% else %>
                            <option value="<%=x %>"><%=x %></option>
                        <% end %>
                      <% end %>
                  </select>
                </span></td>
              </tr>
            </table>
        </div>
      </td>
    </tr>
  </table>
</div>