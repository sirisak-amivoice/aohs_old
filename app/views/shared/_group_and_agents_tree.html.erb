<% content_for :header do %>
 
  <%= stylesheet_src_path('/YUI.2.7/build/treeview/assets/skins/default/tree.css') %>
  <%#= stylesheet_src_path('/YUI.2.7/build/button/assets/skins/sam/button.css') %>
  <%= javascript_src_path('/YUI.2.7/build/yahoo-dom-event/yahoo-dom-event.js') %>
  <%#= javascript_src_path('/YUI.2.7/build/animation/animation-min.js') %>
  <%= javascript_src_path('/YUI.2.7/build/treeview/treeview-min.js') %>
  <%= javascript_src_path('/YUI.2.7/examples/treeview/assets/js/TaskNode.js') %>

  <script type="text/javascript">
	
	var username = "<%= @username %>";
	var tree;
	var iconMode = 0;
	var tvAgents = [];
	var tvGroups = [];
	
	function rebuildTree(data){
		
		tree = new YAHOO.widget.TreeView("treediv",data);
						
        YAHOO.util.Event.on("expand", "click", function(e) {
            tree.expandAll();
            YAHOO.util.Event.preventDefault(e);
        });
        
        YAHOO.util.Event.on("collapse", "click", function(e) {
            tree.collapseAll();
            YAHOO.util.Event.preventDefault(e);
        });
			
		tree.subscribe("labelClick", function(node) {
			var node_id = node.data.NodeId;
	        var node_type = node.data.NodeType;
	        var key_search;
	
            if(node_type == 'cate'){
              key_search = "cate=" + node_id.toString();
              var curnode = node.parent;
              while(!curnode.isRoot()){
                 key_search = key_search + "," + curnode.data.NodeId;
                 curnode = curnode.parent;
              }
            }
            else if(node_type == 'group') {
              key_search = "group=" + node_id.toString();
            }
            else if(node_type == 'agent'){
              key_search = "agent=" + node_id.toString();
            }
            try { onSearchVoice(key_search); } catch(e) {}
		});
		
		function loadAgentListNode(node){					
			if(node.data.NodeType=="group"){
				if (parseInt(node.data.NodeId) > 0) {
					try {
						var loaded = node.data.loaded || false;
						if(!loaded){
							node.data.loaded = true;
							var n = node;
							$.getJSON("<%= url_for(:controller => 'tree',:action => 'tree_source_agents')%>?grp=" + node.data.NodeId + "node_type=task", function(data){
								var m = data.length;
								tree.removeNode(n.children[0]);
								for (var j=0; j<m; j++){
									var newNodes = new YAHOO.widget.TaskNode(data[j], n, false);
								}
								tree.draw();
							});
						}					
					}catch(e){
						alert(e);
					}					
				}
			}
		}
		
	    function getCheckedNodesAgents(nodes) {
	        nodes = nodes || tree.getRoot().children;
			var l=nodes.length;
	        for(var i=0; i<l; i++) {
	            var n = nodes[i];
	            if ((n.checkState === 2 ||n.checkState === 1)) {
	                if(n.data.NodeType == "agent"){
						if(parseInt(n.data.NodeId) != 0){
							tvAgents.push(n.data.NodeId);
						} else {
							// unknow agent
							if(n.label == 'UnknownAgents'){
								tvAgents.push(0);	
							}
						}
	                }
	            }
	            if (n.hasChildren()) {
	              getCheckedNodesAgents(n.children);
	            }
	        }
	    }
		function getAgentsNodes(){
			tvAgents = [];
			getCheckedNodesAgents();	
			$("#tvOfAgents").val(tvAgents.join(','));
		}
		
	    function getCheckedNodesGroups(nodes) {
	        nodes = nodes || tree.getRoot().children;
			var l=nodes.length
	        for(var i=0; i<l; i++) {
	            var n = nodes[i];
				if (n.data.NodeType == "group") {
					var loaded = n.data.loaded || false;
					if (((n.checkState === 2) || (n.checkState === 1)) && (loaded== false)) {
						tvGroups.push(n.data.NodeId);
					}
				}
	            if (n.hasChildren()) {
	              getCheckedNodesGroups(n.children);
	            }
	        }
	    }
		function getGroupsNodes(){
			tvGroups = [];
			getCheckedNodesGroups();	
			$("#tvOfGroups").val(tvGroups.join(','));
		}

        tree.subscribe("checkClick", function(node) {
			getAgentsNodes();
			getGroupsNodes();
        });

		tree.subscribe("expand",function(node){
			if(node.data.NodeType=="group"){
				loadAgentListNode(node);	
			}
		});

	    function setDynamicNodes(nodes) {
	        nodes = nodes || tree.getRoot().children;
			var l=nodes.length
	        for(var i=0; i<l; i=i+1) {
	            var n = nodes[i];
				if (n.data.NodeType == "group") {
					if((parseInt(n.data.NodeId) > 0) && (n.children.length <= 0)){
						nodes[i].data.loaded = false;
						var newNodes = new YAHOO.widget.TextNode({label: "Loading", "NodeId": 0},nodes[i], false);						
					} else {
						nodes[i].data.loaded = true;
					}	
				}
				if(n.hasChildren()){
					setDynamicNodes(nodes[i].children);	
				}
	        }
	    }
				
        var arrChkAgentId = [];
        function setCheckedNodes(){
            var chkAgentId = $("#checked_nodes").text();
            arrChkAgentId = chkAgentId.split(",");
            if(arrChkAgentId.length > 0){
                checkedSelectedNodes();
                tree.getRoot().expandAll();
                collapseOrExpandNode();
            }
        }

        function checkedSelectedNodes(nodes){
          nodes = nodes || tree.getRoot().children;
            
          if(arrChkAgentId.length != 0){
              var node_arr = arrChkAgentId;
              for(var i=0; i<nodes.length; ++i) {
                var node_label = nodes[i].data.NodeId;
                if(nodes[i].data.NodeType == "agent"){
                    if(map_label(node_arr,node_label) != -1){
                        nodes[i].check();
                    }
                }
                if(nodes[i].hasChildren()){
                  checkedSelectedNodes(nodes[i].children);
                }
              }
           }
        }

        function collapseOrExpandNode(nodes){
            nodes = nodes || tree.getRoot().children;
            for(var i=0; i< nodes.length; ++i) {
              var n = nodes[i];
              if(n.checkState === 2 || n.checkState === 1){
                n.expandAll();
                if(nodes[i].hasChildren()){
                    collapseOrExpandNode(nodes[i].children);
                }
              } else {
                n.collapseAll();
              }
            }
        }
            
        function map_label(v,n){
            var r = -1;
            for(var i=0; i<v.length;i++){
                if(parseInt(v[i]) == parseInt(n)){
                    r = i;
                    break;
                }
            }
            return r;
        }
		
		tree.setNodesProperty('propagateHighlightUp',true);
		tree.setNodesProperty('propagateHighlightDown',true);
		tree.collapseAll();
		setDynamicNodes();
        tree.render();
		
	}
		
	function initTreeView(){
		var agents = $("#firstLoadAgent").val() || "";
        $.getJSON("<%= url_for(:controller => 'tree',:action => 'tree_source')%>?with_agent=false&node_type=task&unknown=true",
		{agents: agents },
		function(data){
             rebuildTree(data); 
			 $("#loadingTree").css("display","none");
        });		
	}	
	
	$(window).bind("load",function() {
		initTreeView();
	});
		
    $(document).ready(function(){
		
    });

  </script>

  <style type="text/css">

    #treediv td{
      font-family:Sans-serif;  
      font-size:8pt;
      padding-left:1px;
      padding-right:1px;
    }
    #treediv {
      width:250px;
    }
    #treediv table,tr {
      border-collapse:collapse;
      text-align:left;
    }
    #expandcontractdiv {
      font-size:8pt;
      background-color:#ccffff;
      border-bottom:1px solid #99cccc;
      width:100%;
      text-align:center;
      display:block;
    }
	
    .ygtvcheck0 { background: url('<%=image_src_path('/YUI.2.7/build/treeview/assets/check0.gif') %>') 0 0 no-repeat; width:14px; height:17px; cursor:pointer }
    .ygtvcheck1 { background: url('<%=image_src_path('/YUI.2.7/build/treeview/assets/check2.gif') %>') 0 0 no-repeat; width:14px; height:17px; cursor:pointer }
    .ygtvcheck2 { background: url('<%=image_src_path('/YUI.2.7/build/treeview/assets/check1.gif') %>') 0 0 no-repeat; background-position:center; width:14px; height:17px; cursor:pointer }
	
	.whitebg {
		background-color:white;
	}

  </style>
  
<% end %>
<div id="expandcontractdiv" style="display:none;">
  <a id="expand" href="#"><%= image_tag("tree_icon/expand_all.gif",{:border => 0, :align => 'absmiddle'}) %> Expand all</a> |
  <a id="collapse" href="#"><%= image_tag("tree_icon/collapse_all.gif",{:border => 0, :align => 'absmiddle'}) %> Collapse all</a>
</div>
<div id="loadingTree" style="padding:5px; color:#A6C9D7; text-align:center; width:90%;">Treeview loading ...</div>
<div id="treediv" class="whitebg ygtv-checkbox" align="left"></div>
<div id="tree_log" style="position:absolute; display:none">
	<%= text_area_tag('checked_nodes','',{:name => 'checked_nodes',:id => 'checked_nodes',:disabled => false}) %>
	<input type="text" id="tvOfAgents">
	<input type="text" id="tvOfGroups">
</div>
<div id="treechk" style="display:none"></div>
<input type="text" id="firstLoadAgent" value="<%=@conds[:agents_id] if @conds %>" style="display:none;"/>